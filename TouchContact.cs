using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace huvr
{
    public class TouchContact
    {
        //public event PropertyChangedEventHandler PropertyChanged;
        public event EventHandler ActiveChanged;

        public delegate void EventHandler(TouchContact c, EventArgs e);

        private bool _active;

        /// <summary>
        /// Construct a new TouchContact.
        /// </summary>
        /// <param name="iID">The unique session ID for this input.</param>
        /// <param name="eContactType">The type of contact.</param>
        /// <param name="tPosition">The position which generated the contact.</param>
        /// 
        public TouchContact(int posX, int posY, float posZ, int iID) //Point tPosition, ContactType eContactType
        {
            //this.Type = eContactType;
            //this.Position = tPosition;
            //this.NormalPosition = new Point(tPosition.X / tScreenSize.X, tPosition.Y / tScreenSize.Y);
            this.ID = iID;
            this.PosX = posX;
            this.PosY = posY;
            this.PosZ = posZ;
            //this.JustDocked = false;
            //this.JustUndocked = false;
            this.IsNew = true;
            this.JustPressed = false;
            this.JustReleased = false;
            this.Holding = false;
            this.Active = false;
        }

        public bool IsNew { get; set; }

        public bool JustPressed { get; set; }

        public bool JustReleased { get; set; }

        public bool Holding { get; set; }

        public bool Active
        {
            get { return _active; }
            set
            {
                if (this._active != value)
                {
                    this._active = value;
                    //OnPropertyChanged("Active");
                    OnActiveChanged(EventArgs.Empty);
                }
            }
        }

        public int PosX { get; set; }

        public int PosY { get; set; }

        public float PosZ { get; set; }

        /// <summary>
        /// Return the unique ID of this contact.
        /// </summary>
        public int ID { get; set; }

        public int ControllerIndex { get; set; }

        /// <summary>
        /// Return the type of the contact - is it new, old or an update to an existing one.
        /// </summary>
        //public ContactType Type { get; set; }

        /// <summary>
        /// Return the position generated by the contact.
        /// </summary>
        //public Point Position { get; set; }

        //protected void OnPropertyChanged(PropertyChangedEventArgs e)
        //{
        //    PropertyChangedEventHandler handler = PropertyChanged;
        //    if (handler != null)
        //    {
        //        handler(this, e);
        //    }
        //}

        //protected void OnPropertyChanged(string propertyName)
        //{
        //    OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
        //}

        protected void OnActiveChanged(EventArgs e)
        {
            EventHandler handler = ActiveChanged;
            if (handler != null)
                handler(this, e);
        }
    }
}
